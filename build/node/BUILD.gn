import("//v8/gni/v8.gni")

config("node_external_config") {
  defines = [
    "NODE_WANT_INTERNALS=1",
    "NODE_SHARED_MODE",
  ]

  if (is_linux) {
    ldflags =
        [ rebase_path("$root_out_dir/lib/libnode.so",
                      root_build_dir) ]
  } else if (is_win) {
    ldflags =
        [ rebase_path("$root_out_dir/node.dll.lib",
                      root_build_dir) ]
  } else if (is_mac) {
    ldflags =
        [ rebase_path("$root_out_dir/libnode.dylib",
                      root_build_dir) ]
  }
}

source_set("node") {
  public_configs = [
    ":node_external_config",
    "//electron/build:electron_config",
  ]

  public_deps = [
    ":build_node",
    "//v8:v8",
  ]
}

if (is_mac) {
  bundle_data("node_resources") {
    sources = [
      "$root_out_dir/libnode.dylib",
    ]
    outputs = [
      "{{bundle_root_dir}}/Libraries/{{source_file_part}}",
    ]
    public_deps = [
      ":node",
    ]
  }
} else if (is_win) {
  group("node_resources") {
    public_configs = [
      ":node_external_config",
    ]

    public_deps = [
      ":node",
    ]
  }
} else if (is_linux) {
  copy("node_resources") {
    sources = [ "$root_out_dir/lib/libnode.so" ]

    public_configs = [
      ":node_external_config",
    ]

    public_deps = [
      ":node",
    ]

    outputs = [
      "$root_out_dir/{{source_file_part}}",
    ]
  }
}

action("build_node") {
  # dummy script - these are actually produced separately through gyp
  script = "//electron/tools/node_gyp_build.py"

  if (is_mac) {
    outputs = [ "$root_out_dir/libnode.dylib" ]
  } else if (is_win) {
    outputs = [ 
      "$root_out_dir/node.dll",
      "$root_out_dir/node.dll.lib",
    ]
  } else if (is_linux) {
    outputs = [ "$root_out_dir/lib/libnode.so" ]
  }
}

# TODO(bridiver) this isn't used right now because generating the node target wipes out the electron target
# action("node_gyp_chromium") {
#   script = "//build/gyp_chromium"
#   inputs = [
#     "//electron/node.gypi",
#     "//electron/vendor/node/node.gyp",
#   ]
#   outputs = [
#     "$root_out_dir/obj/electron/vendor/node/node.ninja",
#   ]
#   args = []
#   if (is_component_build) {
#     args += [ "-D", "component=shared_library", ]
#   }
#   args += [
#     "-I", rebase_path("node.gypi", root_build_dir),
#     rebase_path("vendor/node/node.gyp", root_build_dir),
#   ]
# }
